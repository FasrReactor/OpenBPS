.. _chain:

-----
Chain
-----

:ref:`chain_xml` file stored information about nuclear transition from one nuclide
to others.The chain structure format is copied from OpenMC package. The script 
generating this file automaticaly based on nuclear data file presented in this
project too. There are three ways to describe such transitions:

1. Simple decay with pointing ``target`` nucleus, decay ``type`` and quantative 
   characteristics like``half_life``[sec] and branching_ratio with their
   uncertainties

2. Transition induced by external source with pointing ``type`` of interaction,
   ``target`` nucleus and energy released/absorbed.

3. For neutron radiation fission reaction is described separately in section
   ``neutron_fission_yields`` because of huge amount of fission product data.

.. code-block:: xml
 
    <energies>2.53000e-02</energies>
    <fission_yields energy="2.53000e-02">
      <products>Gd157 Gd156 I135 Xe135 Xe136 Cs135</products>
      <data>6.142710e-5 1.483250e-04 0.0292737 0.002566345 0.0219242 4.9097e-6</data>
    </fission_yields>

Data are printing for every existing energy of flying neutron in data files and
stored in arrays with target names ``<products>`` and according values 
``<data>``.

    **Note:** The size of chain generated by nuclear data is more than 3000. It
    means that matrix to solve general equation has a dimension 3000x3000 and
    calculation be slowed down. For a number of problem it is not necessery to
    have a lot of nucleus. To reduce chain user can install OpenMC package and
    call for ``reduce()`` method from Python 3.5+ (read openmc_)

.. only:: html

.. _openmc: https://docs.openmc.org/en/stable/pythonapi/generated/openmc.deplete.Chain.html

